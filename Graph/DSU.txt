#include<bits/stdc++.h>
using namespace std;
int seg[4*100000];
void built(int in,int low,int high,vector<int> &v){
	if(low==high){
        seg[in]=v[low];
        return;
	}
      int mid=low+(high-low)/2;
      built(2*in+1,low,mid,v);
      built(2*in+2,mid+1,high,v);
      seg[in]=seg[2*in+1]+seg[2*in+2];
}
int query(int in,int low,int high,int l,int r){
	if(l>high || r<low){
		return 0;
	}
	if(low>=l && high<=r){
		return seg[in];
	}
	int mid=low+(high-low)/2;
	int left=query(2*in+1,low,mid,l,r);
	int right=query(2*in+2,mid+1,high,l,r);
	return left+right;
}

class DisJointSet{
	vector<int> par,rank;
public:
	DisJointSet(int n){
		par.resize(n+1);
		rank.resize(n+1,0);
		for(int i=0;i<=n;i++){
			par[i]=i;
		}
	}

	int findPar(int node){
		if(par[node]==node)return node;
		return par[node]=findPar(par[node]);
	}

	void unionByRank(int u,int v){
		int uPar=findPar(u);
		int vPar=findPar(v);
		if(uPar==vPar)return;
		else if(rank[uPar]<rank[vPar]){
			par[uPar]=vPar;
		}else if(rank[vPar]<rank[uPar]){
			 par[vPar]=uPar;
		}else{
			  par[uPar]=vPar;
			  rank[vPar]++;
		}
	}
};

 
void solve(){
	 DisJointSet ds(8);
	 ds.unionByRank(1,2);
	 ds.unionByRank(2,3);
	 ds.unionByRank(4,5);
	 ds.unionByRank(6,7);
	 ds.unionByRank(5,6);
	 if(ds.findPar(3)==ds.findPar(7))cout<<"Same Parent";
	 else cout<<"Not Same Parent";
	 cout<<endl;
	 ds.unionByRank(3,7);
	 ds.unionByRank(5,6);
	 if(ds.findPar(3)==ds.findPar(7))cout<<"Same Parent";
	 else cout<<"Not Same Parent";
}
 
int main(){
	// ios_base::sync_with_stdio(false);
    // cin.tie(NULL);
    #ifndef ONLINE_JUDGE
       freopen("input1.txt","r",stdin);
       freopen("output1.txt","w",stdout);
    #endif
       int t=1;
       while(t--){
       	solve();
       	cout<<endl;
       }	
 
}
