class Solution {
public:
    int networkDelayTime(vector<vector<int>>& times, int n, int k) {
        vector<pair<int,int>> adj[n+1];
        for(auto it:times){
            adj[it[0]].push_back({it[1],it[2]});
        }
        vector<int> dis(n+1,1e6);
        dis[k]=0;
        priority_queue<pair<int,int>,vector<pair<int,int>>,greater<pair<int,int>>> pq;
        pq.push({0,k});
        while(!pq.empty()){
            auto curr=pq.top();
            pq.pop();
            int currNode=curr.second;
            int currCost=curr.first;
            for(auto it:adj[currNode]){
                int neighNode=it.first;
                int neighCost=it.second;
                if(currCost+neighCost<dis[neighNode]){
                    dis[neighNode]=currCost+neighCost;
                    pq.push({dis[neighNode],neighNode});
                }
            }
        }
        int ans=-1e9;
        for(int i=1;i<=n;i++){
            cout<<dis[i]<<" ";
            if(i==k)continue;
            if(dis[i]==1e6){
                return -1;
            }
            ans=max(dis[i],ans);
        }
         return ans;
    }
};
