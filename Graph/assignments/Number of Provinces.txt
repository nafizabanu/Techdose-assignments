class DisJointSet{
    public:
    vector<int> rank,par;
    DisJointSet(int n){
        rank.resize(n);
        par.resize(n);
        for(int i=0;i<n;i++)par[i]=i;
    }

    int findPar(int node){
        return par[node]==node?node:findPar(par[node]);
    }
    void unionByRank(int u,int v){
        int upar=findPar(u);
        int vpar=findPar(v);
        if(vpar==upar)return;
        if(rank[upar]<rank[vpar]){
             par[upar]=vpar;
        }else if(rank[vpar]<rank[upar]){
            par[vpar]=upar;
        }else{
            par[vpar]=upar;
            rank[upar]++;
        }
    }
};

class Solution {
public:
    int findCircleNum(vector<vector<int>>& isConnected) {
        int n=isConnected.size();
        DisJointSet DSU(n);
        for(int i=0;i<n;i++){
            for(int j=0;j<n;j++){
                if(isConnected[i][j]){
                    if(DSU.findPar(i)!=DSU.findPar(j)){
                        DSU.unionByRank(i,j);
                    }
                }
            }
        }
         int ans=0;
         for(int i=0;i<n;i++){
             if(DSU.par[i]==i)ans++;
         }
         return ans;
    }
};
