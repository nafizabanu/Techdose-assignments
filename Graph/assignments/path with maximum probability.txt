class Solution {
public:
    double maxProbability(int n, vector<vector<int>>& edges, vector<double>& succProb, int start, int end) {
        vector<vector<pair<int, double>>> adj(n);
        for (int i = 0; i < edges.size(); i++) {
            adj[edges[i][0]].push_back({edges[i][1], succProb[i]});
            adj[edges[i][1]].push_back({edges[i][0], succProb[i]});
        }
        queue<int> q;
        q.push(start);
        vector<double> ans(n, 0.0);
        ans[start] = 1.0;
        while (!q.empty()) {
            int curr = q.front();q.pop();
            for (auto x : adj[curr]) {
                int node = x.first;
                double prob = x.second;
                double nProb = ans[curr] * prob;
                if (nProb > ans[node]) {
                    ans[node] = nProb;
                    q.push(node);
                }
            }
        }
        return ans[end];
    }
};
