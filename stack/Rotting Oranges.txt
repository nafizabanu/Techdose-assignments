class Solution {
public:
    int dRow[4]={0,0,-1,1};
    int dCol[4]={-1,1,0,0};
    int orangesRotting(vector<vector<int>>& grid) {
        int R,C;
        R=grid.size();
        C=grid[0].size();
        queue<pair<pair<int,int>,int>> q;
        vector<vector<int>> vis(R,vector<int>(C));
        for(int i=0;i<R;i++){
            for(int j=0;j<C;j++){
                if(grid[i][j]==2){
                    q.push({{i,j},0});
                    vis[i][j]=2;
                }else{
                    vis[i][j]=grid[i][j];
                }
            }
        }
        int ans=0;
        while(!q.empty()){
            auto curr=q.front();
             q.pop();
            int currRow=curr.first.first;
            int currCol=curr.first.second;
            int currTime=curr.second;
            ans=max(ans,currTime);

            for(int i=0;i<4;i++){
                int neighRow=currRow+dRow[i];
                int neighCol=currCol+dCol[i];
                if(neighRow>=0 && neighRow<R && neighCol>=0 && neighCol<C && vis[neighRow][neighCol]!=2 && grid[neighRow][neighCol]==1){
                     vis[neighRow][neighCol]=2;
                    q.push({{neighRow,neighCol},currTime+1});
                }
            }

        }
        for(int i=0;i<R;i++){
            for(int j=0;j<C;j++){
                if(vis[i][j]==1)return -1;
            }
        }
        return ans;
    }
};
